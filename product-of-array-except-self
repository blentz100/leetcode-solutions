//https://leetcode.com/problems/product-of-array-except-self/
//Solution is accepted, but it's relatively slow


/**
 * @param {number[]} nums
 * @return {number[]}
 */
var productExceptSelf = function(nums) {
  let solutionArr = []
  const leftProducts = []
  const rightProducts = []

  for(let i = 0, j = nums.length  -1; i < nums.length; i++, j--){
    leftProducts[i] = isNaN(leftProducts[i-1] * nums[i]) ? nums[i] : leftProducts[i-1] * nums[i]
    rightProducts[j] = isNaN(rightProducts[j + 1] * nums[j]) ? nums[j] : rightProducts[j + 1] * nums[j]    
  }
  for (let i = 0; i < nums.length; i++){
    solutionArr[i] = (isNaN(leftProducts[i-1]) ? 1 :leftProducts[i-1] )  
    * (isNaN(rightProducts[i+1]) ? 1 : rightProducts[i+1] )
  }
  return solutionArr
}
